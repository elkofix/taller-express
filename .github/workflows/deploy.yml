name: Deploy Express to AWS ECS (Public ECR)

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  ECR_PUBLIC_REGISTRY: public.ecr.aws/r7c1c8z5
  ECR_REPOSITORY_EXPRESS: express-app
  ECS_CLUSTER: my-first-cluster
  ECS_TASK_DEFINITION: .aws/ecs-task-definition.json
  ECS_SUBNET: subnet-033e289b7b67bf8df
  ECS_SECURITY_GROUP: sg-02c3702cfa8399f6e

jobs:
  deploy:
    name: Build & Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login en Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Construir y subir imagen de Express a ECR Public
        run: |
          docker build -t $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY_EXPRESS:latest ./express
          docker push $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY_EXPRESS:latest

      - name: Obtener la última versión de la tarea
        run: |
          LATEST_TASK_DEFINITION=$(aws ecs list-task-definitions \
            --family-prefix express-mongo-task \
            --sort DESC \
            --query 'taskDefinitionArns[0]' \
            --output text)
          echo "LATEST_TASK_DEFINITION=$LATEST_TASK_DEFINITION" >> $GITHUB_ENV

      - name: Ejecutar una tarea en ECS sin servicio
        run: |
          aws ecs run-task --cluster $ECS_CLUSTER \
            --task-definition $LATEST_TASK_DEFINITION \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$ECS_SUBNET],securityGroups=[$ECS_SECURITY_GROUP],assignPublicIp=ENABLED}"
